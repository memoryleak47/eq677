use crate::*;

pub fn db() -> Vec<MatrixMagma> {
    vec![
        // size 5
        MatrixMagma::parse("
           0, 2, 1, 4, 3,
           3, 1, 4, 0, 2,
           4, 3, 2, 1, 0,
           2, 4, 0, 3, 1,
           1, 0, 3, 2, 4
        "),

        // size 7
        MatrixMagma::parse("
           0, 1, 2, 3, 4, 5, 6,
           2, 3, 1, 4, 5, 6, 0,
           4, 6, 5, 0, 2, 1, 3,
           5, 0, 6, 2, 1, 3, 4,
           1, 4, 3, 5, 6, 0, 2,
           6, 2, 0, 1, 3, 4, 5,
           3, 5, 4, 6, 0, 2, 1
        "),

        MatrixMagma::parse("
           0, 2, 3, 4, 5, 6, 1,
           5, 0, 4, 2, 1, 3, 6,
           6, 1, 0, 5, 3, 2, 4,
           1, 5, 2, 0, 6, 4, 3,
           2, 4, 6, 3, 0, 1, 5,
           3, 6, 5, 1, 4, 0, 2,
           4, 3, 1, 6, 2, 5, 0
        "),

        MatrixMagma::parse("
           1, 2, 3, 4, 5, 0, 6,
           4, 1, 6, 5, 3, 2, 0,
           6, 3, 1, 0, 2, 5, 4,
           2, 0, 5, 1, 4, 6, 3,
           0, 6, 4, 2, 1, 3, 5,
           5, 4, 0, 3, 6, 1, 2,
           3, 5, 2, 6, 0, 4, 1
        "),

        MatrixMagma::parse("
           1, 2, 3, 4, 5, 6, 0,
           5, 6, 0, 1, 2, 3, 4,
           2, 3, 4, 5, 6, 0, 1,
           6, 0, 1, 2, 3, 4, 5,
           3, 4, 5, 6, 0, 1, 2,
           0, 1, 2, 3, 4, 5, 6,
           4, 5, 6, 0, 1, 2, 3
        "),

        // size 9
        MatrixMagma::parse("
           0, 2, 3, 4, 5, 6, 7, 8, 1,
           1, 3, 8, 7, 0, 4, 6, 2, 5,
           2, 6, 4, 1, 8, 0, 5, 7, 3,
           3, 4, 7, 5, 2, 1, 0, 6, 8,
           4, 1, 5, 8, 6, 3, 2, 0, 7,
           5, 8, 2, 6, 1, 7, 4, 3, 0,
           6, 0, 1, 3, 7, 2, 8, 5, 4,
           7, 5, 0, 2, 4, 8, 3, 1, 6,
           8, 7, 6, 0, 3, 5, 1, 4, 2
        "),

        MatrixMagma::parse("
           1, 2, 3, 4, 5, 6, 7, 0, 8,
           6, 5, 8, 2, 4, 0, 3, 1, 7,
           5, 3, 0, 7, 8, 4, 6, 2, 1,
           8, 0, 2, 6, 1, 7, 4, 3, 5,
           2, 7, 6, 8, 3, 5, 1, 4, 0,
           4, 8, 1, 3, 7, 2, 0, 5, 6,
           0, 4, 7, 5, 2, 1, 8, 6, 3,
           3, 6, 4, 1, 0, 8, 5, 7, 2,
           7, 1, 5, 0, 6, 3, 2, 8, 4
        "),
    ]
}

#[test]
fn db_canon() {
    for x in db() {
        assert_eq!(x.canonicalize(), x);
    }
}

#[test]
fn db_unique() {
    use std::collections::HashSet;

    let db = db();
    let n = db.len();
    let s: HashSet<_> = db.into_iter().collect();
    assert_eq!(n, s.len());
}
